/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AppInterface extends utils.Interface {
  functions: {
    "PUBLISH_GAS()": FunctionFragment;
    "addTagToPost(uint256,string,bool)": FunctionFragment;
    "claimName(string)": FunctionFragment;
    "ownerTimeline(address,uint256)": FunctionFragment;
    "ownerTimelineLength(address)": FunctionFragment;
    "postTagScore(uint256,string)": FunctionFragment;
    "posts(uint256)": FunctionFragment;
    "postsLength()": FunctionFragment;
    "publishPost(string)": FunctionFragment;
    "tagTimeline(string,uint256)": FunctionFragment;
    "tagTimelineIncludes(string,uint256)": FunctionFragment;
    "topTagsOfPost(uint256,uint256)": FunctionFragment;
    "walletToNameMap(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PUBLISH_GAS"
      | "addTagToPost"
      | "claimName"
      | "ownerTimeline"
      | "ownerTimelineLength"
      | "postTagScore"
      | "posts"
      | "postsLength"
      | "publishPost"
      | "tagTimeline"
      | "tagTimelineIncludes"
      | "topTagsOfPost"
      | "walletToNameMap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PUBLISH_GAS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTagToPost",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "claimName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ownerTimeline",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerTimelineLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "postTagScore",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "posts", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "postsLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "publishPost", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tagTimeline",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tagTimelineIncludes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "topTagsOfPost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "walletToNameMap",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "PUBLISH_GAS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTagToPost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerTimeline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerTimelineLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postTagScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "posts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishPost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tagTimeline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tagTimelineIncludes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topTagsOfPost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletToNameMap",
    data: BytesLike
  ): Result;

  events: {
    "NameClaimed(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NameClaimed"): EventFragment;
}

export interface NameClaimedEventObject {
  owner: string;
  name: string;
}
export type NameClaimedEvent = TypedEvent<
  [string, string],
  NameClaimedEventObject
>;

export type NameClaimedEventFilter = TypedEventFilter<NameClaimedEvent>;

export interface App extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AppInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PUBLISH_GAS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addTagToPost(
      postId: BigNumberish,
      tag: string,
      calculateForTopTags: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimName(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerTimeline(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownerTimelineLength(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    postTagScore(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    posts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        id: BigNumber;
        content: string;
        owner: string;
      }
    >;

    postsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    publishPost(
      content: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tagTimeline(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tagTimelineIncludes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    topTagsOfPost(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { tag: string; score: BigNumber }>;

    walletToNameMap(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  PUBLISH_GAS(overrides?: CallOverrides): Promise<BigNumber>;

  addTagToPost(
    postId: BigNumberish,
    tag: string,
    calculateForTopTags: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimName(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerTimeline(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownerTimelineLength(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  postTagScore(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  posts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      id: BigNumber;
      content: string;
      owner: string;
    }
  >;

  postsLength(overrides?: CallOverrides): Promise<BigNumber>;

  publishPost(
    content: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tagTimeline(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tagTimelineIncludes(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  topTagsOfPost(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { tag: string; score: BigNumber }>;

  walletToNameMap(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PUBLISH_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    addTagToPost(
      postId: BigNumberish,
      tag: string,
      calculateForTopTags: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claimName(name: string, overrides?: CallOverrides): Promise<void>;

    ownerTimeline(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerTimelineLength(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postTagScore(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    posts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        id: BigNumber;
        content: string;
        owner: string;
      }
    >;

    postsLength(overrides?: CallOverrides): Promise<BigNumber>;

    publishPost(content: string, overrides?: CallOverrides): Promise<void>;

    tagTimeline(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tagTimelineIncludes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    topTagsOfPost(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { tag: string; score: BigNumber }>;

    walletToNameMap(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NameClaimed(address,string)"(
      owner?: string | null,
      name?: null
    ): NameClaimedEventFilter;
    NameClaimed(owner?: string | null, name?: null): NameClaimedEventFilter;
  };

  estimateGas: {
    PUBLISH_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    addTagToPost(
      postId: BigNumberish,
      tag: string,
      calculateForTopTags: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimName(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerTimeline(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerTimelineLength(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postTagScore(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    posts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    postsLength(overrides?: CallOverrides): Promise<BigNumber>;

    publishPost(
      content: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tagTimeline(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tagTimelineIncludes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    topTagsOfPost(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    walletToNameMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PUBLISH_GAS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTagToPost(
      postId: BigNumberish,
      tag: string,
      calculateForTopTags: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimName(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerTimeline(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerTimelineLength(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postTagScore(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    posts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishPost(
      content: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tagTimeline(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tagTimelineIncludes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    topTagsOfPost(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    walletToNameMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
